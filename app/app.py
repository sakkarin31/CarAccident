# streamlit run .\app\app.py
import streamlit as st
import geopandas as gpd
import osmnx as ox
import numpy as np
import os
import pydeck as pdk
import pandas as pd
import matplotlib.pyplot as plt

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit
st.set_page_config(layout="wide", page_title="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á - ‡∏™‡∏á‡∏Ç‡∏•‡∏≤")

st.title("üö¶ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á - ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏á‡∏Ç‡∏•‡∏≤")
st.markdown("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏™‡∏á‡∏Ç‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ (‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)")

# ------------------- ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏ô‡∏ô -------------------
FILE_PATH = "songkhla_roads.geojson"
target_roads = ["4", "42", "43", "407"]

@st.cache_data
def get_roads():
    if os.path.exists(FILE_PATH):
        edges = gpd.read_file(FILE_PATH)
    else:
        G = ox.graph_from_place(
            "Songkhla, Thailand",
            network_type="drive",
            custom_filter='["highway"~"trunk|primary"]'
        )
        edges = ox.graph_to_gdfs(G, nodes=False)
        edges = edges[edges["ref"].isin(target_roads)]
        edges.to_file(FILE_PATH, driver="GeoJSON")
    return edges

edges = get_roads()

# ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á -------------------
def predict_risk(road_id):
    np.random.seed(int(road_id))
    return np.random.uniform(10, 80)

# ------------------- UI -------------------
selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á", ["-"] + target_roads, format_func=lambda x: f"‡∏ñ‡∏ô‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç {x}" if x != "-" else "-")


# ------------------- ‡πÅ‡∏õ‡∏•‡∏á GeoDataFrame ‡πÄ‡∏õ‡πá‡∏ô PathLayer -------------------
def gdf_to_paths(gdf, color, width):
    data = []
    for _, row in gdf.iterrows():
        if row.geometry.geom_type == "LineString":
            coords = [[x, y] for x, y in row.geometry.coords]
            data.append({"path": coords, "color": color, "width": width})
        elif row.geometry.geom_type == "MultiLineString":
            for part in row.geometry:
                coords = [[x, y] for x, y in part.coords]
                data.append({"path": coords, "color": color, "width": width})
    return data

# ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤ 4)
all_paths = gdf_to_paths(edges, [150, 150, 150], 4)

# ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÅ‡∏î‡∏á (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤ 10)
highlight_paths = []
if selected != "-":
    highlight_paths = gdf_to_paths(edges[edges["ref"] == selected], [255, 0, 0], 12)

# ------------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á Layers -------------------
layers = [
    pdk.Layer(
        "PathLayer",
        data=all_paths,
        get_path="path",
        get_color="color",
        get_width="width",
    )
]

if highlight_paths:
    layers.append(
        pdk.Layer(
            "PathLayer",
            data=highlight_paths,
            get_path="path",
            get_color="color",
            get_width="width",
            pickable=True
        )
    )

# ------------------- ViewState -------------------
view_state = pdk.ViewState(latitude=7.2, longitude=100.6, zoom=9)

# ------------------- ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà -------------------
st.pydeck_chart(
    pdk.Deck(
        layers=layers,
        initial_view_state=view_state,
        map_style=pdk.map_styles.LIGHT  # ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡πà‡∏≤‡∏á
    ),
    height=600,
    width=800
)

# ------------------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ -------------------
if selected != "-":
    risk = predict_risk(selected)
    st.markdown(
        f"### üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢\n**‡∏ñ‡∏ô‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç {selected}** "
        f"‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì "
        f"<span style='color:red; font-size:28px;'>{risk:.2f}%</span>",
        unsafe_allow_html=True
    )


# -----------------------------------------------------------------------------------------------



    st.header("üìÇ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ 2024")
# ‡πÇ‡∏´‡∏•‡∏î accident2024.csv
accident_df = pd.read_csv("dataset/accident2024.csv")
st.dataframe(accident_df)

# ------------------- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏£‡∏≤‡∏ü‡∏≠‡∏≤‡∏Å‡∏≤‡∏® -------------------

# ------------------- ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏® -------------------

def clean_numeric(series):
    """‡∏•‡∏ö % ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float"""
    return (
        series.astype(str)
        .str.replace("%", "", regex=False)
        .str.replace("¬∞F", "", regex=False)
        .str.replace("in", "", regex=False)
        .str.strip()
        .replace("", np.nan)     # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN
        .astype(float)
    )

st.header("üå§Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏á‡∏Ç‡∏•‡∏≤ 2024")
weather_df = pd.read_csv("dataset/songkhla_weather_2024_01.csv")

# ------------------- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏£‡∏≤‡∏ü‡∏≠‡∏≤‡∏Å‡∏≤‡∏® -------------------
st.header("üå§Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏á‡∏Ç‡∏•‡∏≤ 2024")

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
if "date" in weather_df.columns:
    weather_df["date"] = pd.to_datetime(weather_df["date"], errors="coerce")
    weather_df["month"] = weather_df["date"].dt.month
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ column date ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    weather_df["month"] = 1  # fallback

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£", ["temperature_F", "humidity_%", "pressure_in"])

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
months = sorted(weather_df["month"].unique())
month_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", months, format_func=lambda m: f"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {m}")

# ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
monthly_data = weather_df[weather_df["month"] == month_selected]

# ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
fig, ax = plt.subplots(figsize=(10,4))
ax.plot(monthly_data["date"], monthly_data[option], label=option, color="tab:blue", marker="o", linestyle="-")
ax.set_title(f"{option} month {month_selected}", fontsize=14)
ax.set_xlabel("day")
ax.set_ylabel(option)
ax.legend()
st.pyplot(fig)



# ------------------- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏£‡∏≤‡∏ü‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏¢ 4 -------------------
st.header("üöó ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏¢ 4 (‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ)")

road4 = accident_df[accident_df["road"] == 4]

if "date" in road4.columns:
    road4["date"] = pd.to_datetime(road4["date"], errors="coerce")
    road4["month"] = road4["date"].dt.to_period("M")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ 2024
    all_months = pd.period_range("2024-01", "2024-12", freq="M")
    monthly_counts = road4.groupby("month").size().reindex(all_months, fill_value=0)

    fig2, ax2 = plt.subplots(figsize=(10,4))
    monthly_counts.plot(kind="bar", ax=ax2, color="tab:red")
    ax2.set_title("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏¢ 4 ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏õ‡∏µ 2024)")
    ax2.set_xlabel("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    ax2.set_ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏")
    st.pyplot(fig2)
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ column ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå accident2024.csv")

# ------------------- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: Histogram ‡∏£‡∏ñ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó -------------------
st.header("üìä Histogram ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ")

# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ column 'vehicle_type' ‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô "<4‡∏•‡πâ‡∏≠", "4‡∏•‡πâ‡∏≠", ">4‡∏•‡πâ‡∏≠"
if "vehicle_type" in accident_df.columns:
    fig3, ax3 = plt.subplots(figsize=(6,4))
    accident_df["vehicle_type"].value_counts().plot(kind="bar", ax=ax3, color="tab:green")
    ax3.set_title("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ô‡∏õ‡∏µ 2024")
    ax3.set_ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
    st.pyplot(fig3)
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ column vehicle_type ‡πÉ‡∏ô accident2024.csv")